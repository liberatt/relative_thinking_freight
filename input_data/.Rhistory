library(tidyverse)
library(ggthemes)
library(jtools)
# Importing data
raw_data <- read.csv("raw_olist_data.csv")
# Data Manipulation
## Remove the insurance
raw_data <- raw_data %>%
mutate(freight_value = freight_value - (0.02 * price)) # based on https://www.nuvemshop.com.br/blog/seguro-correios/
## Apply Log
min_freight <- -min(raw_data$freight_value)
raw_data <- raw_data %>%
mutate(freight_value = log(freight_value + min_freight + 1),
price = log(price + 1),
distance = log(distance + 1),
weight_used = log(weight_used + 1),
renda_percapita = log(renda_percapita + 1))
## Visualizing Distributions
plot_data <- raw_data %>%
select(order_id, freight_value, price, renda_percapita,
distance, weight_used) %>%
gather(freight_value, price,  renda_percapita,
distance, weight_used, -order_id, key = 'variable', value = 'value')
ggplot(plot_data, aes(x = variable, y = value)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("cyl") +
theme_base() +
coord_flip()
# Removing Outliers
# create detect outlier function
detect_outlier <- function(x) {
# calculate first quantile
Quantile1 <- quantile(x, probs=.25, na.rm = TRUE)
# calculate third quantile
Quantile3 <- quantile(x, probs=.75, na.rm = TRUE)
# calculate inter quartile range
IQR <- Quantile3 - Quantile1
# return true or false
x > Quantile3 + (IQR*1.5) | x < Quantile1 - (IQR*1.5)
}
# create remove outlier function
remove_outlier <- function(dataframe,
columns=names(dataframe)) {
# for loop to traverse in columns vector
for (col in columns) {
# remove observation if it satisfies outlier function
dataframe <- dataframe[!detect_outlier(dataframe[[col]]), ]
}
dataframe
}
cleaned_data <- remove_outlier(raw_data, c('price', 'freight_value', 'renda_percapita', 'distance', 'weight_used'))
## Visualizing Distributions Again
plot_data <- cleaned_data %>%
select(order_id, freight_value, price, renda_percapita,
distance, weight_used) %>%
gather(freight_value, price,  renda_percapita,
distance, weight_used, -order_id, key = 'variable', value = 'value')
ggplot(plot_data, aes(x = variable, y = value)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("cyl") +
theme_base() +
coord_flip()
# REGRESSION 1
cleaned_data <- cleaned_data[complete.cases(cleaned_data), ]
model <- lm(freight_value ~ price + distance +
weight_used + renda_percapita +
(bebes * price) + (brinquedos * price) +
(consoles_games * price) + (eletronicos * price) +
(fashion_bolsas_e_acessorios * price) + (informatica_acessorios * price) +
(moveis_decoracao * price) + (relogios_presentes * price) +
(utilidades_domesticas * price) + (automotivo * price) +
(beleza_saude * price) + (cama_mesa_banho * price) + (esporte_lazer * price) +
(ferramentas_jardim * price) + (malas_acessorios * price) + (moveis_escritorio * price) +
(papelaria * price) + (pet_shop * price) + (telefonia * price)
, data = cleaned_data)
model <- lm(freight_value ~ price + distance +
weight_used + renda_percapita, data = cleaned_data)
summary(model)
setwd("~/Documents/Github/relative_thinking_project/input_data")
library(tidyverse)
library(ggthemes)
library(jtools)
# Importing data
setwd("~/Documents/Github/relative_thinking_project/input_data")
raw_data <- read.csv("raw_olist_data.csv")
# Data Manipulation
## Remove the insurance
raw_data <- raw_data %>%
mutate(freight_value = freight_value - (0.02 * price)) # based on https://www.nuvemshop.com.br/blog/seguro-correios/
## Apply Log
min_freight <- -min(raw_data$freight_value)
raw_data <- raw_data %>%
mutate(freight_value = log(freight_value + min_freight + 1),
price = log(price + 1),
distance = log(distance + 1),
weight_used = log(weight_used + 1),
renda_percapita = log(renda_percapita + 1))
## Visualizing Distributions
plot_data <- raw_data %>%
select(order_id, freight_value, price, renda_percapita,
distance, weight_used) %>%
gather(freight_value, price,  renda_percapita,
distance, weight_used, -order_id, key = 'variable', value = 'value')
ggplot(plot_data, aes(x = variable, y = value)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("cyl") +
theme_base() +
coord_flip()
# Removing Outliers
# create detect outlier function
detect_outlier <- function(x) {
# calculate first quantile
Quantile1 <- quantile(x, probs=.25, na.rm = TRUE)
# calculate third quantile
Quantile3 <- quantile(x, probs=.75, na.rm = TRUE)
# calculate inter quartile range
IQR <- Quantile3 - Quantile1
# return true or false
x > Quantile3 + (IQR*1.5) | x < Quantile1 - (IQR*1.5)
}
# create remove outlier function
remove_outlier <- function(dataframe,
columns=names(dataframe)) {
# for loop to traverse in columns vector
for (col in columns) {
# remove observation if it satisfies outlier function
dataframe <- dataframe[!detect_outlier(dataframe[[col]]), ]
}
dataframe
}
cleaned_data <- remove_outlier(raw_data, c('price', 'freight_value', 'renda_percapita', 'distance', 'weight_used'))
## Visualizing Distributions Again
plot_data <- cleaned_data %>%
select(order_id, freight_value, price, renda_percapita,
distance, weight_used) %>%
gather(freight_value, price,  renda_percapita,
distance, weight_used, -order_id, key = 'variable', value = 'value')
ggplot(plot_data, aes(x = variable, y = value)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("cyl") +
theme_base() +
coord_flip()
# REGRESSION 1
cleaned_data <- cleaned_data[complete.cases(cleaned_data), ]
model <- lm(freight_value ~ price + distance +
weight_used + renda_percapita +
(bebes * price) + (brinquedos * price) +
(consoles_games * price) + (eletronicos * price) +
(fashion_bolsas_e_acessorios * price) + (informatica_acessorios * price) +
(moveis_decoracao * price) + (relogios_presentes * price) +
(utilidades_domesticas * price) + (automotivo * price) +
(beleza_saude * price) + (cama_mesa_banho * price) + (esporte_lazer * price) +
(ferramentas_jardim * price) + (malas_acessorios * price) + (moveis_escritorio * price) +
(papelaria * price) + (pet_shop * price) + (telefonia * price)
, data = cleaned_data)
model <- lm(freight_value ~ price + distance +
weight_used + renda_percapita, data = cleaned_data)
summary(model)
summ(model, confint = TRUE, digits = 3)
plot_summs(model)
install.packages('ggstance')
plot_summs(model)
install.packages('broom.mixed')
plot_summs(model)
plot_summs(model, robust=TRUE)
plot_summs(model, plot.distributions = TRUE, inner_ci_level = .9)
install.packages('sjPlot')
model <- lm(freight_value ~ price + distance +
weight_used + renda_percapita +
(bebes * price) + (brinquedos * price) +
(consoles_games * price) + (eletronicos * price) +
(fashion_bolsas_e_acessorios * price) + (informatica_acessorios * price) +
(moveis_decoracao * price) + (relogios_presentes * price) +
(utilidades_domesticas * price) + (automotivo * price) +
(beleza_saude * price) + (cama_mesa_banho * price) + (esporte_lazer * price) +
(ferramentas_jardim * price) + (malas_acessorios * price) + (moveis_escritorio * price) +
(papelaria * price) + (pet_shop * price) + (telefonia * price)
, data = cleaned_data)
summ(model, confint = TRUE, digits = 3)
effect_plot(model, pred = telefonia, interval = TRUE, plot.points = TRUE,
jitter = 0.05)
effect_plot(model, pred = price, interval = TRUE, plot.points = TRUE,
jitter = 0.05)
plot_summs(model, plot.distributions = TRUE, inner_ci_level = .9)
help("plot_summs")
plot_summs(model, coefs = c('price'), plot.distributions = TRUE, inner_ci_level = .9)
plot_summs(model, coefs = c('price', 'price:telefonia'), plot.distributions = TRUE, inner_ci_level = .9)
plot_summs(model,
coefs = c(
'price', 'price:telefonia', 'price:pet_shop',
'price:papelaria', 'price:moveis_escritorio'
), plot.distributions = TRUE, inner_ci_level = .9)
plot_summs(model,
coefs = c(
'price', 'price:telefonia', 'price:pet_shop',
'price:papelaria', 'price:moveis_escritorio',
'price:malas_acessorios', 'price:ferramentas_jardim',
'price:esporte_lazer', 'price:cama_mesa_banho',
'price:beleza_saude', 'price:automotivo', 'price:utilidades_domesticas',
'price:relogios_presentes', 'price:moveis_decoracao', 'price:informatica_acessorios',
'price:fashion_bolsas_e_acessorios'
), plot.distributions = TRUE, inner_ci_level = .9)
plot_model(model, type = "pred", terms = c("price", "cama_mesa_banho"))
library(sjPlot)
plot_model(model, type = "pred", terms = c("price", "cama_mesa_banho"))
plot_model(model, type = "pred", terms = c("price", "ferramentas_jardim"))
plot_model(model, type = "pred", terms = c("price", "ferramentas_jardim", "utilidades_domesticas"))
View(cleaned_data)
plot_summs(model,
coefs = c(
'price', 'price:telefonia', 'price:pet_shop',
'price:papelaria', 'price:moveis_escritorio',
'price:malas_acessorios', 'price:ferramentas_jardim',
'price:esporte_lazer', 'price:cama_mesa_banho',
'price:beleza_saude', 'price:automotivo', 'price:utilidades_domesticas',
'price:relogios_presentes', 'price:moveis_decoracao', 'price:informatica_acessorios',
'price:fashion_bolsas_e_acessorios'
))
summary(model)
plot_model(model, type = "pred", terms = c("price", "ferramentas_jardim"))
summ(model)
install.packages("stargazer")
library(stargazer)
stargazer(model, type = "html",  #we use html output to match our planned R Markdown output
title = "My iris models")
stargazer(model, type = "html",  #we use html output to match our planned R Markdown output
title = "My iris models", out = "regression.html")
stargazer(model, type = "pdf",  #we use html output to match our planned R Markdown output
title = "My iris models", out = "regression.pdf")
stargazer(model, type = "text",  #we use html output to match our planned R Markdown output
title = "My iris models", out = "regression.text")
plot_summs(model,
coefs = c(
'price', 'price:telefonia', 'price:pet_shop',
'price:papelaria', 'price:moveis_escritorio',
'price:malas_acessorios', 'price:ferramentas_jardim',
'price:esporte_lazer', 'price:cama_mesa_banho',
'price:beleza_saude', 'price:automotivo', 'price:utilidades_domesticas',
'price:relogios_presentes', 'price:moveis_decoracao', 'price:informatica_acessorios',
'price:fashion_bolsas_e_acessorios'
))
summary(model)
